% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzzz.R
\name{layer_rnn}
\alias{layer_rnn}
\title{Base class for recurrent layers}
\usage{
layer_rnn(
  object,
  cell,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  unroll = FALSE,
  time_major = FALSE,
  ...
)
}
\arguments{
\item{cell}{A RNN cell instance or a list of RNN cell instances.
A RNN cell is a class that has:
\itemize{
\item A \code{call(input_at_t, states_at_t)} method, returning
\verb{(output_at_t, states_at_t_plus_1)}. The call method of the
cell can also take the optional argument \code{constants}, see
section "Note on passing external constants" below.
\item A \code{state_size} attribute. This can be a single integer
(single state) in which case it is the size of the recurrent
state. This can also be a list of integers (one size per state).
The \code{state_size} can also be TensorShape or list of
TensorShape, to represent high dimension state.
\item A \code{output_size} attribute. This can be a single integer or a
TensorShape, which represent the shape of the output. For backward
compatible reason, if this attribute is not available for the
cell, the value will be inferred by the first element of the
\code{state_size}.
\item A \code{get_initial_state(inputs=NULL, batch_size=NULL, dtype=NULL)}
method that creates a tensor meant to be fed to \code{call()} as the
initial state, if the user didn't specify any initial state via other
means. The returned initial state should have a shape of
\link{batch_size, cell.state_size}. The cell might choose to create a
tensor full of zeros, or full of other values based on the cell's
implementation.
\code{inputs} is the input tensor to the RNN layer, which should
contain the batch size as its shape\link{0}, and also dtype. Note that
the shape\link{0} might be \code{NULL} during the graph construction. Either
the \code{inputs} or the pair of \code{batch_size} and \code{dtype} are provided.
\code{batch_size} is a scalar tensor that represents the batch size
of the inputs. \code{dtype} is \code{tf.DType} that represents the dtype of
the inputs.
For backward compatibility, if this method is not implemented
by the cell, the RNN layer will create a zero filled tensor with the
size of \link{batch_size, cell.state_size}.
In the case that \code{cell} is a list of RNN cell instances, the cells
will be stacked on top of each other in the RNN, resulting in an
efficient stacked RNN.
}}

\item{return_sequences}{Boolean (default \code{FALSE}). Whether to return the last
output in the output sequence, or the full sequence.}

\item{return_state}{Boolean (default \code{FALSE}). Whether to return the last state
in addition to the output.}

\item{go_backwards}{Boolean (default \code{FALSE}).
If TRUE, process the input sequence backwards and return the
reversed sequence.}

\item{stateful}{Boolean (default \code{FALSE}). If TRUE, the last state
for each sample at index i in a batch will be used as initial
state for the sample of index i in the following batch.}

\item{unroll}{Boolean (default \code{FALSE}).
If TRUE, the network will be unrolled, else a symbolic loop will be
used. Unrolling can speed-up a RNN, although it tends to be more
memory-intensive. Unrolling is only suitable for short sequences.}

\item{time_major}{The shape format of the \code{inputs} and \code{outputs} tensors.
If TRUE, the inputs and outputs will be in shape
\verb{(timesteps, batch, ...)}, whereas in the FALSE case, it will be
\verb{(batch, timesteps, ...)}. Using \code{time_major = TRUE} is a bit more
efficient because it avoids transposes at the beginning and end of the
RNN calculation. However, most TensorFlow data is batch-major, so by
default this function accepts input and emits output in batch-major
form.}

\item{...}{standard layer arguments.}

\item{zero_output_for_mask}{Boolean (default \code{FALSE}).
Whether the output should use zeros for the masked timesteps. Note that
this field is only used when \code{return_sequences} is TRUE and mask is
provided. It can useful if you want to reuse the raw output sequence of
the RNN without interference from the masked timesteps, eg, merging
bidirectional RNNs.}
}
\description{
Base class for recurrent layers
}
\details{
See \href{https://www.tensorflow.org/guide/keras/rnn}{the Keras RNN API guide}
for details about the usage of RNN API.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
