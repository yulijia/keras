% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_rnn}
\alias{layer_rnn}
\title{Base class for recurrent layers}
\usage{
layer_rnn(
  object,
  cell,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  unroll = FALSE,
  time_major = FALSE,
  ...
)
}
\arguments{
\item{cell}{A RNN cell instance or a list of RNN cell instances.
A RNN cell is a class that has:
\itemize{
\item A \code{call(input_at_t, states_at_t)} method, returning
\verb{(output_at_t, states_at_t_plus_1)}. The call method of the
cell can also take the optional argument \code{constants}, see
section "Note on passing external constants" below.
\item A \code{state_size} attribute. This can be a single integer
(single state) in which case it is the size of the recurrent
state. This can also be a list of integers (one size per state).
The \code{state_size} can also be TensorShape or list of
TensorShape, to represent high dimension state.
\item A \code{output_size} attribute. This can be a single integer or a
TensorShape, which represent the shape of the output. For backward
compatible reason, if this attribute is not available for the
cell, the value will be inferred by the first element of the
\code{state_size}.
\item A \code{get_initial_state(inputs=NULL, batch_size=NULL, dtype=NULL)}
method that creates a tensor meant to be fed to \code{call()} as the
initial state, if the user didn't specify any initial state via other
means. The returned initial state should have a shape of
\link{batch_size, cell.state_size}. The cell might choose to create a
tensor full of zeros, or full of other values based on the cell's
implementation.
\code{inputs} is the input tensor to the RNN layer, which should
contain the batch size as its shape\link{0}, and also dtype. Note that
the shape\link{0} might be \code{NULL} during the graph construction. Either
the \code{inputs} or the pair of \code{batch_size} and \code{dtype} are provided.
\code{batch_size} is a scalar tensor that represents the batch size
of the inputs. \code{dtype} is \code{tf.DType} that represents the dtype of
the inputs.
For backward compatibility, if this method is not implemented
by the cell, the RNN layer will create a zero filled tensor with the
size of \link{batch_size, cell.state_size}.
In the case that \code{cell} is a list of RNN cell instances, the cells
will be stacked on top of each other in the RNN, resulting in an
efficient stacked RNN.
}}

\item{return_sequences}{Boolean (default \code{FALSE}). Whether to return the last
output in the output sequence, or the full sequence.}

\item{return_state}{Boolean (default \code{FALSE}). Whether to return the last state
in addition to the output.}

\item{go_backwards}{Boolean (default \code{FALSE}).
If TRUE, process the input sequence backwards and return the
reversed sequence.}

\item{stateful}{Boolean (default \code{FALSE}). If TRUE, the last state
for each sample at index i in a batch will be used as initial
state for the sample of index i in the following batch.}

\item{unroll}{Boolean (default \code{FALSE}).
If TRUE, the network will be unrolled, else a symbolic loop will be
used. Unrolling can speed-up a RNN, although it tends to be more
memory-intensive. Unrolling is only suitable for short sequences.}

\item{time_major}{The shape format of the \code{inputs} and \code{outputs} tensors.
If TRUE, the inputs and outputs will be in shape
\verb{(timesteps, batch, ...)}, whereas in the FALSE case, it will be
\verb{(batch, timesteps, ...)}. Using \code{time_major = TRUE} is a bit more
efficient because it avoids transposes at the beginning and end of the
RNN calculation. However, most TensorFlow data is batch-major, so by
default this function accepts input and emits output in batch-major
form.}

\item{...}{standard layer arguments.}

\item{zero_output_for_mask}{Boolean (default \code{FALSE}).
Whether the output should use zeros for the masked timesteps. Note that
this field is only used when \code{return_sequences} is TRUE and mask is
provided. It can useful if you want to reuse the raw output sequence of
the RNN without interference from the masked timesteps, eg, merging
bidirectional RNNs.}
}
\description{
Base class for recurrent layers
}
\details{
See \href{https://www.tensorflow.org/guide/keras/rnn}{the Keras RNN API guide}
for details about the usage of RNN API.

Call arguments:
inputs: Input tensor.
mask: Binary tensor of shape \verb{[batch_size, timesteps]} indicating whether
a given timestep should be masked. An individual \code{TRUE} entry indicates
that the corresponding timestep should be utilized, while a \code{FALSE}
entry indicates that the corresponding timestep should be ignored.
training: Python boolean indicating whether the layer should behave in
training mode or in inference mode. This argument is passed to the cell
when calling it. This is for use with cells that use dropout.
initial_state: List of initial state tensors to be passed to the first
call of the cell.
constants: List of constant tensors to be passed to the cell at each
timestep.

Input shape:
N-D tensor with shape \verb{[batch_size, timesteps, ...]} or
\verb{[timesteps, batch_size, ...]} when time_major is TRUE.

Output shape:
\itemize{
\item If \code{return_state}: a list of tensors. The first tensor is
the output. The remaining tensors are the last states,
each with shape \verb{[batch_size, state_size]}, where \code{state_size} could
be a high dimension tensor shape.
\item If \code{return_sequences}: N-D tensor with shape
\verb{[batch_size, timesteps, output_size]}, where \code{output_size} could
be a high dimension tensor shape, or
\verb{[timesteps, batch_size, output_size]} when \code{time_major} is TRUE.
\item Else, N-D tensor with shape \verb{[batch_size, output_size]}, where
\code{output_size} could be a high dimension tensor shape.
}

Masking:
This layer supports masking for input data with a variable number
of timesteps. To introduce masks to your data,
use an \link{tf.keras.layers.Embedding} layer with the \code{mask_zero} parameter
set to \code{TRUE}.

Note on using statefulness in RNNs:
You can set RNN layers to be 'stateful', which means that the states
computed for the samples in one batch will be reused as initial states
for the samples in the next batch. This assumes a one-to-one mapping
between samples in different successive batches.

To enable statefulness:
- Specify \code{stateful=TRUE} in the layer constructor.
- Specify a fixed batch size for your model, by passing
If sequential model:
\code{batch_input_shape=(...)} to the first layer in your model.
Else for functional model with 1 or more Input layers:
\code{batch_shape=(...)} to all the first layers in your model.
This is the expected shape of your inputs
\emph{including the batch size}.
It should be a list of integers, e.g. \verb{(32, 10, 100)}.
- Specify \code{shuffle=FALSE} when calling \code{fit()}.

To reset the states of your model, call \code{.reset_states()} on either
a specific layer, or on your entire model.

Note on specifying the initial state of RNNs:
You can specify the initial state of RNN layers symbolically by
calling them with the keyword argument \code{initial_state}. The value of
\code{initial_state} should be a tensor or list of tensors representing
the initial state of the RNN layer.

You can specify the initial state of RNN layers numerically by
calling \code{reset_states} with the keyword argument \code{states}. The value of
\code{states} should be a numpy array or list of numpy arrays representing
the initial state of the RNN layer.

Note on passing external constants to RNNs:
You can pass "external" constants to the cell using the \code{constants}
keyword argument of \code{RNN.__call__} (as well as \code{RNN.call}) method. This
requires that the \code{cell.call} method accepts the same keyword argument
\code{constants}. Such constants can be used to condition the cell
transformation on additional static inputs (not changing over time),
a.k.a. an attention mechanism.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{from keras.src.layers import RNN
from keras.src import backend

# First, let's define a RNN Cell, as a layer subclass.
class MinimalRNNCell(keras.layers.Layer):

    def __init__(self, units, **kwargs):
        self.units = units
        self.state_size = units
        super(MinimalRNNCell, self).__init__(**kwargs)

    def build(self, input_shape):
        self.kernel = self.add_weight(shape=(input_shape[-1], self.units),
                                      initializer='uniform',
                                      name='kernel')
        self.recurrent_kernel = self.add_weight(
            shape=(self.units, self.units),
            initializer='uniform',
            name='recurrent_kernel')
        self.built = TRUE

    def call(self, inputs, states):
        prev_output = states[0]
        h = backend.dot(inputs, self.kernel)
        output = h + backend.dot(prev_output, self.recurrent_kernel)
        return output, [output]

# Let's use this cell in a RNN layer:

cell = MinimalRNNCell(32)
x = keras.Input((NULL, 5))
layer = RNN(cell)
y = layer(x)

# Here's how to use the cell to build a stacked RNN:

cells = [MinimalRNNCell(32), MinimalRNNCell(64)]
x = keras.Input((NULL, 5))
layer = RNN(cells)
y = layer(x)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
