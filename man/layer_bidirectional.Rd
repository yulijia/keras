% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_bidirectional}
\alias{layer_bidirectional}
\title{Bidirectional wrapper for RNNs}
\usage{
layer_bidirectional(
  object,
  layer,
  merge_mode = "concat",
  weights = NULL,
  backward_layer = NULL,
  ...
)
}
\arguments{
\item{layer}{\code{keras.layers.RNN} instance, such as \code{keras.layers.LSTM} or
\code{keras.layers.GRU}. It could also be a \code{keras.layers.Layer} instance
that meets the following criteria:
\enumerate{
\item Be a sequence-processing layer (accepts 3D+ inputs).
\item Have a \code{go_backwards}, \code{return_sequences} and \code{return_state}
attribute (with the same semantics as for the \code{RNN} class).
\item Have an \code{input_spec} attribute.
\item Implement serialization via \code{get_config()} and \code{from_config()}.
Note that the recommended way to create new RNN layers is to write a
custom RNN cell and use it with \code{keras.layers.RNN}, instead of
subclassing \code{keras.layers.Layer} directly.
}
\itemize{
\item When the \code{returns_sequences} is true, the output of the masked
timestep will be zero regardless of the layer's original
\code{zero_output_for_mask} value.
}}

\item{merge_mode}{Mode by which outputs of the forward and backward RNNs will be
combined. One of {'sum', 'mul', 'concat', 'ave', NULL}. If NULL, the
outputs will not be combined, they will be returned as a list. Default
value is 'concat'.}

\item{backward_layer}{Optional \code{keras.layers.RNN}, or \code{keras.layers.Layer}
instance to be used to handle backwards input processing.
If \code{backward_layer} is not provided, the layer instance passed as the
\code{layer} argument will be used to generate the backward layer
automatically.
Note that the provided \code{backward_layer} layer should have properties
matching those of the \code{layer} argument, in particular it should have the
same values for \code{stateful}, \code{return_states}, \code{return_sequences}, etc.
In addition, \code{backward_layer} and \code{layer} should have different
\code{go_backwards} argument values.
A \code{ValueError} will be raised if these requirements are not met.}

\item{...}{standard layer arguments.}
}
\description{
Bidirectional wrapper for RNNs
}
\details{
Call arguments:
The call arguments for this layer are the same as those of the wrapped RNN
layer.
Beware that when passing the \code{initial_state} argument during the call of
this layer, the first half in the list of elements in the \code{initial_state}
list will be passed to the forward RNN call and the last half in the list
of elements will be passed to the backward RNN call.

ValueError:
1. If \code{layer} or \code{backward_layer} is not a \code{Layer} instance.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{model = Sequential()
model.add(Bidirectional(LSTM(10, return_sequences=TRUE),
                             input_shape=(5, 10)))
model.add(Bidirectional(LSTM(10)))
model.add(Dense(5))
model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

# With custom backward layer
model = Sequential()
forward_layer = LSTM(10, return_sequences=TRUE)
backward_layer = LSTM(10, activation='relu', return_sequences=TRUE,
                      go_backwards=TRUE)
model.add(Bidirectional(forward_layer, backward_layer=backward_layer,
                        input_shape=(5, 10)))
model.add(Dense(5))
model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
