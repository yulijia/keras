% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_simple_rnn_cell}
\alias{layer_simple_rnn_cell}
\title{Cell class for SimpleRNN}
\usage{
layer_simple_rnn_cell(
  units,
  activation = "tanh",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
Default: hyperbolic tangent (\code{tanh}).
If you pass \code{NULL}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, (default \code{TRUE}), whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix,
used for the linear transformation of the inputs. Default:
\code{glorot_uniform}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel}
weights matrix, used for the linear transformation of the recurrent
state.  Default: \code{orthogonal}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{zeros}.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{NULL}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_constraint}{Constraint function applied to the bias vector. Default:
\code{NULL}.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state. Default: 0.}

\item{...}{standard layer arguments.}
}
\description{
Cell class for SimpleRNN
}
\details{
See \href{https://www.tensorflow.org/guide/keras/rnn}{the Keras RNN API guide}
for details about the usage of RNN API.

This class processes one step within the whole time sequence input, whereas
\code{tf.keras.layer.SimpleRNN} processes the whole sequence.

Call arguments:
inputs: A 2D tensor, with shape of \verb{[batch, feature]}.
states: A 2D tensor with shape of \verb{[batch, units]}, which is the state
from the previous time step. For timestep 0, the initial state provided
by user will be feed to cell.
training: Python boolean indicating whether the layer should behave in
training mode or in inference mode. Only relevant when \code{dropout} or
\code{recurrent_dropout} is used.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{inputs = np.random.random([32, 10, 8]).astype(np.float32)
rnn = tf.keras.layers.RNN(tf.keras.layers.SimpleRNNCell(4))

output = rnn(inputs)  # The output has shape `[32, 4]`.

rnn = tf.keras.layers.RNN(
    tf.keras.layers.SimpleRNNCell(4),
    return_sequences=TRUE,
    return_state=TRUE)

# whole_sequence_output has shape `[32, 10, 4]`.
# final_state has shape `[32, 4]`.
whole_sequence_output, final_state = rnn(inputs)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
