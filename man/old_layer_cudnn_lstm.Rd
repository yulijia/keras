% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-recurrent.R
\name{old_layer_cudnn_lstm}
\alias{old_layer_cudnn_lstm}
\title{(Deprecated) Fast LSTM implementation backed by \href{https://developer.nvidia.com/cudnn}{CuDNN}.}
\usage{
old_layer_cudnn_lstm(
  object,
  units,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  unit_forget_bias = TRUE,
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  return_sequences = FALSE,
  return_state = FALSE,
  stateful = FALSE,
  input_shape = NULL,
  batch_input_shape = NULL,
  batch_size = NULL,
  dtype = NULL,
  name = NULL,
  trainable = NULL,
  weights = NULL
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix, used for
the linear transformation of the inputs. Default: \code{glorot_uniform}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel} weights
matrix, used for the linear transformation of the recurrent state.
Default: \code{orthogonal}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{zeros}.}

\item{unit_forget_bias}{Boolean (default \code{TRUE}). If TRUE, add 1 to the bias of
the forget gate at initialization. Setting it to true will also force
\code{bias_initializer="zeros"}. This is recommended in \href{http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf}{Jozefowicz et al.}.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{NULL}.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation"). Default: \code{NULL}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_constraint}{Constraint function applied to the bias vector. Default:
\code{NULL}.}

\item{return_sequences}{Boolean. Whether to return the last output in the output
sequence, or the full sequence. Default: \code{FALSE}.}

\item{return_state}{Boolean. Whether to return the last state in addition to the
output. Default: \code{FALSE}.}

\item{stateful}{Boolean (default \code{FALSE}). If TRUE, the last state for each
sample at index i in a batch will be used as initial state for the sample
of index i in the following batch.}
}
\description{
Can only be run on GPU, with the TensorFlow backend.
}
\section{References}{

\itemize{
\item \href{http://www.bioinf.jku.at/publications/older/2604.pdf}{Long short-term memory} (original 1997 paper)
\item \href{https://www.cs.toronto.edu/~graves/preprint.pdf}{Supervised sequence labeling with recurrent neural networks}
\item \href{https://arxiv.org/abs/1512.05287}{A Theoretically Grounded Application of Dropout in Recurrent Neural Networks}
}
}

\seealso{
Other recurrent layers: 
\code{\link{old_layer_cudnn_gru}()},
\code{\link{old_layer_gru}()},
\code{\link{old_layer_lstm}()},
\code{\link{old_layer_rnn}()},
\code{\link{old_layer_simple_rnn}()}
}
\concept{recurrent layers}
\keyword{internal}
