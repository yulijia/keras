% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_conv_3d_transpose}
\alias{layer_conv_3d_transpose}
\title{Transposed convolution layer (sometimes called Deconvolution)}
\usage{
layer_conv_3d_transpose(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L, 1L),
  padding = "valid",
  output_padding = NULL,
  data_format = NULL,
  dilation_rate = list(1L, 1L, 1L),
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)

layer_conv_3d_transpose(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L, 1L),
  padding = "valid",
  output_padding = NULL,
  data_format = NULL,
  dilation_rate = list(1L, 1L, 1L),
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{filters}{Integer, the dimensionality of the output space
(i.e. the number of output filters in the convolution).}

\item{kernel_size}{An integer or list of 3 integers, specifying the
depth, height and width of the 3D convolution window.
Can be a single integer to specify the same value for
all spatial dimensions.}

\item{strides}{An integer or list of 3 integers,
specifying the strides of the convolution along the depth, height
and width.
Can be a single integer to specify the same value for
all spatial dimensions.
Specifying any stride value != 1 is incompatible with specifying
any \code{dilation_rate} value != 1.}

\item{padding}{one of \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding with zeros
evenly to the left/right or up/down of the input such that output has
the same height/width dimension as the input.}

\item{output_padding}{An integer or list of 3 integers,
specifying the amount of padding along the depth, height, and
width.
Can be a single integer to specify the same value for all
spatial dimensions.
The amount of output padding along a given dimension must be
lower than the stride along that same dimension.
If set to \code{NULL} (default), the output shape is inferred.}

\item{data_format}{A string,
one of \code{channels_last} (default) or \code{channels_first}.
The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch_size, depth, height, width, channels)} while \code{channels_first}
corresponds to inputs with shape
\verb{(batch_size, channels, depth, height, width)}.
When unspecified, uses \code{image_data_format} value found in your Keras
config file at \verb{~/.keras/keras.json} (if exists) else 'channels_last'.
Defaults to 'channels_last'.}

\item{dilation_rate}{an integer or list of 3 integers, specifying
the dilation rate to use for dilated convolution.
Can be a single integer to specify the same value for
all spatial dimensions.
Currently, specifying any \code{dilation_rate} value != 1 is
incompatible with specifying any stride value != 1.}

\item{activation}{Activation function to use.
If you don't specify anything, no activation is applied
(see \code{keras.activations}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix
(see \code{keras.initializers}). Defaults to 'glorot_uniform'.}

\item{bias_initializer}{Initializer for the bias vector
(see \code{keras.initializers}). Defaults to 'zeros'.}

\item{kernel_regularizer}{Regularizer function applied to
the \code{kernel} weights matrix
(see \code{keras.regularizers}).}

\item{bias_regularizer}{Regularizer function applied to the bias vector
(see \code{keras.regularizers}).}

\item{activity_regularizer}{Regularizer function applied to
the output of the layer (its "activation")
(see \code{keras.regularizers}).}

\item{kernel_constraint}{Constraint function applied to the kernel matrix
(see \code{keras.constraints}).}

\item{bias_constraint}{Constraint function applied to the bias vector
(see \code{keras.constraints}).}

\item{...}{standard layer arguments.}
}
\description{
Transposed convolution layer (sometimes called Deconvolution)

Transposed convolution layer (sometimes called Deconvolution)
}
\details{
The need for transposed convolutions generally arises
from the desire to use a transformation going in the opposite direction
of a normal convolution, i.e., from something that has the shape of the
output of some convolution to something that has the shape of its input
while maintaining a connectivity pattern that is compatible with
said convolution.

When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(list of integers or \code{NULL}, does not include the sample axis),
e.g. \verb{input_shape=(128, 128, 128, 3)} for a 128x128x128 volume with 3
channels if \code{data_format="channels_last"}.

Input shape:
5D tensor with shape:
\verb{(batch_size, channels, depth, rows, cols)} if
data_format='channels_first'
or 5D tensor with shape:
\verb{(batch_size, depth, rows, cols, channels)} if
data_format='channels_last'.

Output shape:
5D tensor with shape:
\verb{(batch_size, filters, new_depth, new_rows, new_cols)} if
data_format='channels_first'
or 5D tensor with shape:
\verb{(batch_size, new_depth, new_rows, new_cols, filters)} if
data_format='channels_last'.
\code{depth} and \code{rows} and \code{cols} values might have changed due to padding.
If \code{output_padding} is specified::

\if{html}{\out{<div class="sourceCode">}}\preformatted{new_depth = ((depth - 1) * strides[0] + kernel_size[0] - 2 * padding[0] +
output_padding[0])
new_rows = ((rows - 1) * strides[1] + kernel_size[1] - 2 * padding[1] +
output_padding[1])
new_cols = ((cols - 1) * strides[2] + kernel_size[2] - 2 * padding[2] +
output_padding[2])
}\if{html}{\out{</div>}}

A tensor of rank 5 representing

References:
\itemize{
\item \href{https://arxiv.org/abs/1603.07285v1}{A guide to convolution arithmetic for deep learning}
\item \href{https://www.matthewzeiler.com/mattzeiler/deconvolutionalnetworks.pdf}{Deconvolutional Networks}
}

The need for transposed convolutions generally arises
from the desire to use a transformation going in the opposite direction
of a normal convolution, i.e., from something that has the shape of the
output of some convolution to something that has the shape of its input
while maintaining a connectivity pattern that is compatible with
said convolution.

When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(list of integers or \code{NULL}, does not include the sample axis),
e.g. \verb{input_shape=(128, 128, 128, 3)} for a 128x128x128 volume with 3
channels if \code{data_format="channels_last"}.

Input shape:
5D tensor with shape:
\verb{(batch_size, channels, depth, rows, cols)} if
data_format='channels_first'
or 5D tensor with shape:
\verb{(batch_size, depth, rows, cols, channels)} if
data_format='channels_last'.

Output shape:
5D tensor with shape:
\verb{(batch_size, filters, new_depth, new_rows, new_cols)} if
data_format='channels_first'
or 5D tensor with shape:
\verb{(batch_size, new_depth, new_rows, new_cols, filters)} if
data_format='channels_last'.
\code{depth} and \code{rows} and \code{cols} values might have changed due to padding.
If \code{output_padding} is specified::

\if{html}{\out{<div class="sourceCode">}}\preformatted{new_depth = ((depth - 1) * strides[0] + kernel_size[0] - 2 * padding[0] +
output_padding[0])
new_rows = ((rows - 1) * strides[1] + kernel_size[1] - 2 * padding[1] +
output_padding[1])
new_cols = ((cols - 1) * strides[2] + kernel_size[2] - 2 * padding[2] +
output_padding[2])
}\if{html}{\out{</div>}}

A tensor of rank 5 representing

References:
\itemize{
\item \href{https://arxiv.org/abs/1603.07285v1}{A guide to convolution arithmetic for deep learning}
\item \href{https://www.matthewzeiler.com/mattzeiler/deconvolutionalnetworks.pdf}{Deconvolutional Networks}
}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}

\itemize{
\item \url{https://keras.io/api/layers}
}
}
