% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_cropping_2d}
\alias{layer_cropping_2d}
\title{Cropping layer for 2D input (e.g. picture)}
\usage{
layer_cropping_2d(
  object,
  cropping = list(list(0L, 0L), list(0L, 0L)),
  data_format = NULL,
  ...
)
}
\arguments{
\item{cropping}{Int, or list of 2 ints, or list of 2 lists of 2 ints.
\itemize{
\item If int: the same symmetric cropping
is applied to height and width.
\item If list of 2 ints:
interpreted as two different
symmetric cropping values for height and width:
\verb{(symmetric_height_crop, symmetric_width_crop)}.
\item If list of 2 lists of 2 ints:
interpreted as
\verb{((top_crop, bottom_crop), (left_crop, right_crop))}
}}

\item{data_format}{A string,
one of \code{channels_last} (default) or \code{channels_first}.
The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch_size, height, width, channels)} while \code{channels_first}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}.
When unspecified, uses
\code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json} (if exists) else 'channels_last'.
Defaults to 'channels_last'.}

\item{...}{standard layer arguments.}
}
\description{
Cropping layer for 2D input (e.g. picture)
}
\details{
It crops along spatial dimensions, i.e. height and width.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> input_shape = (2, 28, 28, 3)
>>> x = np.arange(np.prod(input_shape)).reshape(input_shape)
>>> y = tf.keras.layers.Cropping2D(cropping=((2, 2), (4, 4)))(x)
>>> print(y.shape)
(2, 24, 20, 3)
}\if{html}{\out{</div>}}

Input shape:
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, rows, cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, rows, cols)}
}

Output shape:
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, cropped_rows, cropped_cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, cropped_rows, cropped_cols)}
}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
