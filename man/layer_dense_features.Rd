% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_dense_features}
\alias{layer_dense_features}
\title{A layer that produces a dense \code{Tensor} based on given \code{feature_columns}}
\usage{
layer_dense_features(
  object,
  feature_columns,
  trainable = TRUE,
  name = NULL,
  ...
)
}
\arguments{
\item{...}{standard layer arguments.}
}
\description{
A layer that produces a dense \code{Tensor} based on given \code{feature_columns}
}
\details{
Generally a single example in training data is described with
FeatureColumns.  At the first layer of the model, this column oriented data
should be converted to a single \code{Tensor}.

This layer can be called multiple times with different features.

This is the V2 version of this layer that uses name_scopes to create
variables instead of variable_scopes. But this approach currently lacks
support for partitioned variables. In that case, use the V1 version instead.

Example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{price = tf.feature_column.numeric_column('price')
keywords_embedded = tf.feature_column.embedding_column(
    tf.feature_column.categorical_column_with_hash_bucket("keywords",
                                                          10000),
    dimensions=16)
columns = [price, keywords_embedded, ...]
feature_layer = tf.keras.layers.DenseFeatures(columns)

features = tf.io.parse_example(
    ..., features=tf.feature_column.make_parse_example_spec(columns))
dense_tensor = feature_layer(features)
for units in [128, 64, 32]:
  dense_tensor = tf.keras.layers.Dense(units, activation='relu')(
    dense_tensor)
prediction = tf.keras.layers.Dense(1)(dense_tensor)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
