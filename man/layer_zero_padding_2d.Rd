% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_zero_padding_2d}
\alias{layer_zero_padding_2d}
\title{Zero-padding layer for 2D input (e.g. picture)}
\usage{
layer_zero_padding_2d(object, padding = list(1L, 1L), data_format = NULL, ...)
}
\arguments{
\item{padding}{Int, or list of 2 ints, or list of 2 lists of 2 ints.
\itemize{
\item If int: the same symmetric padding
is applied to height and width.
\item If list of 2 ints:
interpreted as two different
symmetric padding values for height and width:
\verb{(symmetric_height_pad, symmetric_width_pad)}.
\item If list of 2 lists of 2 ints:
interpreted as
\verb{((top_pad, bottom_pad), (left_pad, right_pad))}
}}

\item{data_format}{A string,
one of \code{channels_last} (default) or \code{channels_first}.
The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch_size, height, width, channels)} while \code{channels_first}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}.
When unspecified, uses
\code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json} (if exists) else 'channels_last'.
Defaults to 'channels_last'.}

\item{...}{standard layer arguments.}
}
\description{
Zero-padding layer for 2D input (e.g. picture)
}
\details{
This layer can add rows and columns of zeros
at the top, bottom, left and right side of an image tensor.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> input_shape = (1, 1, 2, 2)
>>> x = np.arange(np.prod(input_shape)).reshape(input_shape)
>>> print(x)
[[[[0 1]
   [2 3]]]]
>>> y = tf.keras.layers.ZeroPadding2D(padding=1)(x)
>>> print(y)
tf.Tensor(
  [[[[0 0]
     [0 0]
     [0 0]
     [0 0]]
    [[0 0]
     [0 1]
     [2 3]
     [0 0]]
    [[0 0]
     [0 0]
     [0 0]
     [0 0]]]], shape=(1, 3, 4, 2), dtype=int64)
}\if{html}{\out{</div>}}

Input shape:
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, rows, cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, rows, cols)}
}

Output shape:
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, padded_rows, padded_cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, padded_rows, padded_cols)}
}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
