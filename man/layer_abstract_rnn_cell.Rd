% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_abstract_rnn_cell}
\alias{layer_abstract_rnn_cell}
\title{Abstract object representing an RNN cell}
\usage{
layer_abstract_rnn_cell(...)
}
\arguments{
\item{...}{standard layer arguments.}
}
\description{
Abstract object representing an RNN cell
}
\details{
See \href{https://www.tensorflow.org/guide/keras/rnn}{the Keras RNN API guide}
for details about the usage of RNN API.

This is the base class for implementing RNN cells with custom behavior.

Every \code{RNNCell} must have the properties below and implement \code{call} with
the signature \verb{(output, next_state) = call(input, state)}.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{  class MinimalRNNCell(AbstractRNNCell):

    def __init__(self, units, **kwargs):
      self.units = units
      super(MinimalRNNCell, self).__init__(**kwargs)

    @property
    def state_size(self):
      return self.units

    def build(self, input_shape):
      self.kernel = self.add_weight(shape=(input_shape[-1], self.units),
                                    initializer='uniform',
                                    name='kernel')
      self.recurrent_kernel = self.add_weight(
          shape=(self.units, self.units),
          initializer='uniform',
          name='recurrent_kernel')
      self.built = TRUE

    def call(self, inputs, states):
      prev_output = states[0]
      h = backend.dot(inputs, self.kernel)
      output = h + backend.dot(prev_output, self.recurrent_kernel)
      return output, output
}\if{html}{\out{</div>}}

This definition of cell differs from the definition used in the literature.
In the literature, 'cell' refers to an object with a single scalar output.
This definition refers to a horizontal array of such units.

An RNN cell, in the most abstract setting, is anything that has
a state and performs some operation that takes a matrix of inputs.
This operation results in an output matrix with \code{self.output_size} columns.
If \code{self.state_size} is an integer, this operation also results in a new
state matrix with \code{self.state_size} columns.  If \code{self.state_size} is a
(possibly nested list of) TensorShape object(s), then it should return a
matching structure of Tensors having shape \verb{[batch_size].concatenate(s)}
for each \code{s} in \code{self.batch_size}.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
