% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_conv_1d_transpose}
\alias{layer_conv_1d_transpose}
\title{Transposed convolution layer (sometimes called Deconvolution)}
\usage{
layer_conv_1d_transpose(
  object,
  filters,
  kernel_size,
  strides = 1L,
  padding = "valid",
  output_padding = NULL,
  data_format = NULL,
  dilation_rate = 1L,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)

layer_conv_1d_transpose(
  object,
  filters,
  kernel_size,
  strides = 1L,
  padding = "valid",
  output_padding = NULL,
  data_format = NULL,
  dilation_rate = 1L,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{filters}{Integer, the dimensionality of the output space
(i.e. the number of output filters in the convolution).}

\item{kernel_size}{An integer length of the 1D convolution window.}

\item{strides}{An integer specifying the stride of the convolution along the
time dimension. Specifying a stride value != 1 is incompatible with
specifying a \code{dilation_rate} value != 1. Defaults to \code{1}.}

\item{padding}{one of \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding with zeros
evenly to the left/right or up/down of the input such that output has
the same height/width dimension as the input.}

\item{output_padding}{An integer specifying the amount of padding along
the time dimension of the output tensor.
The amount of output padding must be lower than the stride.
If set to \code{NULL} (default), the output shape is inferred.}

\item{data_format}{A string, one of \code{channels_last} (default) or
\code{channels_first}.  The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch_size, length, channels)} while \code{channels_first} corresponds to
inputs with shape \verb{(batch_size, channels, length)}.}

\item{dilation_rate}{an integer, specifying
the dilation rate to use for dilated convolution.
Currently, specifying a \code{dilation_rate} value != 1 is
incompatible with specifying a stride value != 1.
Also dilation rate larger than 1 is not currently supported.}

\item{activation}{Activation function to use.
If you don't specify anything, no activation is applied
(see \code{keras.activations}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix
(see \code{keras.initializers}). Defaults to 'glorot_uniform'.}

\item{bias_initializer}{Initializer for the bias vector
(see \code{keras.initializers}). Defaults to 'zeros'.}

\item{kernel_regularizer}{Regularizer function applied to
the \code{kernel} weights matrix (see \code{keras.regularizers}).}

\item{bias_regularizer}{Regularizer function applied to the bias vector
(see \code{keras.regularizers}).}

\item{activity_regularizer}{Regularizer function applied to
the output of the layer (its "activation") (see \code{keras.regularizers}).}

\item{kernel_constraint}{Constraint function applied to the kernel matrix
(see \code{keras.constraints}).}

\item{bias_constraint}{Constraint function applied to the bias vector
(see \code{keras.constraints}).}

\item{...}{standard layer arguments.}
}
\description{
Transposed convolution layer (sometimes called Deconvolution)

Transposed convolution layer (sometimes called Deconvolution)
}
\details{
The need for transposed convolutions generally arises
from the desire to use a transformation going in the opposite direction
of a normal convolution, i.e., from something that has the shape of the
output of some convolution to something that has the shape of its input
while maintaining a connectivity pattern that is compatible with
said convolution.

When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(list of integers or \code{NULL}, does not include the sample axis),
e.g. \verb{input_shape=(128, 3)} for data with 128 time steps and 3 channels.

The need for transposed convolutions generally arises
from the desire to use a transformation going in the opposite direction
of a normal convolution, i.e., from something that has the shape of the
output of some convolution to something that has the shape of its input
while maintaining a connectivity pattern that is compatible with
said convolution.

When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(list of integers or \code{NULL}, does not include the sample axis),
e.g. \verb{input_shape=(128, 3)} for data with 128 time steps and 3 channels.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}

\itemize{
\item \url{https://keras.io/api/layers}
}
}
