% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-dropout.R
\name{old_layer_spatial_dropout_2d}
\alias{old_layer_spatial_dropout_2d}
\title{Spatial 2D version of Dropout.}
\usage{
old_layer_spatial_dropout_2d(
  object,
  rate,
  data_format = NULL,
  batch_size = NULL,
  name = NULL,
  trainable = NULL,
  weights = NULL
)
}
\arguments{
\item{rate}{float between 0 and 1. Fraction of the input units to drop.}

\item{data_format}{'channels_first' or 'channels_last'. In 'channels_first'
mode, the channels dimension (the depth) is at index 1, in 'channels_last'
mode is it at index 3. It defaults to the \code{image_data_format} value found
in your Keras config file at \verb{~/.keras/keras.json}. If you never set it,
then it will be "channels_last".}
}
\description{
This version performs the same function as Dropout, however it drops entire
2D feature maps instead of individual elements. If adjacent pixels within
feature maps are strongly correlated (as is normally the case in early
convolution layers) then regular dropout will not regularize the activations
and will otherwise just result in an effective learning rate decrease. In
this case, \code{layer_spatial_dropout_2d} will help promote independence between
feature maps and should be used instead.
}
\section{Input shape}{
 4D tensor with shape: \verb{(samples, channels, rows, cols)}
if data_format='channels_first' or 4D tensor with shape: \verb{(samples, rows, cols, channels)} if data_format='channels_last'.
}

\section{Output shape}{
 Same as input
}

\section{References}{
 - \href{https://arxiv.org/abs/1411.4280}{Efficient Object Localization Using Convolutional Networks}
}

\seealso{
Other dropout layers: 
\code{\link{old_layer_dropout}()},
\code{\link{old_layer_spatial_dropout_1d}()},
\code{\link{old_layer_spatial_dropout_3d}()}
}
\concept{dropout layers}
