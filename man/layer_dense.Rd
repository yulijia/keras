% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_dense}
\alias{layer_dense}
\title{Just your regular densely-connected NN layer}
\usage{
layer_dense(
  object,
  units,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
If you don't specify anything, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix.}

\item{bias_initializer}{Initializer for the bias vector.}

\item{kernel_regularizer}{Regularizer function applied to
the \code{kernel} weights matrix.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.}

\item{activity_regularizer}{Regularizer function applied to
the output of the layer (its "activation").}

\item{kernel_constraint}{Constraint function applied to
the \code{kernel} weights matrix.}

\item{bias_constraint}{Constraint function applied to the bias vector.}

\item{...}{standard layer arguments.}
}
\description{
Just your regular densely-connected NN layer
}
\details{
\code{Dense} implements the operation:
\code{output = activation(dot(input, kernel) + bias)}
where \code{activation} is the element-wise activation function
passed as the \code{activation} argument, \code{kernel} is a weights matrix
created by the layer, and \code{bias} is a bias vector created by the layer
(only applicable if \code{use_bias} is \code{TRUE}). These are all attributes of
\code{Dense}.

Note: If the input to the layer has a rank greater than 2, then \code{Dense}
computes the dot product between the \code{inputs} and the \code{kernel} along the
last axis of the \code{inputs} and axis 0 of the \code{kernel} (using \code{tf.tensordot}).
For example, if input has dimensions \verb{(batch_size, d0, d1)}, then we create
a \code{kernel} with shape \verb{(d1, units)}, and the \code{kernel} operates along axis 2
of the \code{input}, on every sub-tensor of shape \verb{(1, 1, d1)} (there are
\code{batch_size * d0} such sub-tensors).  The output in this case will have
shape \verb{(batch_size, d0, units)}.

Besides, layer attributes cannot be modified after the layer has been called
once (except the \code{trainable} attribute).
When a popular kwarg \code{input_shape} is passed, then keras will create
an input layer to insert before the current layer. This can be treated
equivalent to explicitly defining an \code{InputLayer}.

Example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> # Create a `Sequential` model and add a Dense layer as the first layer.
>>> model = tf.keras.models.Sequential()
>>> model.add(tf.keras.Input(shape=(16,)))
>>> model.add(tf.keras.layers.Dense(32, activation='relu'))
>>> # Now the model will take as input arrays of shape (NULL, 16)
>>> # and output arrays of shape (NULL, 32).
>>> # Note that after the first layer, you don't need to specify
>>> # the size of the input anymore:
>>> model.add(tf.keras.layers.Dense(32))
>>> model.output_shape
(NULL, 32)
}\if{html}{\out{</div>}}

Input shape:
N-D tensor with shape: \verb{(batch_size, ..., input_dim)}.
The most common situation would be
a 2D input with shape \verb{(batch_size, input_dim)}.

Output shape:
N-D tensor with shape: \verb{(batch_size, ..., units)}.
For instance, for a 2D input with shape \verb{(batch_size, input_dim)},
the output would have shape \verb{(batch_size, units)}.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
