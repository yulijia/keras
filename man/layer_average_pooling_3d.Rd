% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_average_pooling_3d}
\alias{layer_average_pooling_3d}
\title{Average pooling operation for 3D data (spatial or spatio-temporal)}
\usage{
layer_average_pooling_3d(
  object,
  pool_size = list(2L, 2L, 2L),
  strides = NULL,
  padding = "valid",
  data_format = NULL,
  ...
)

layer_average_pooling_3d(
  object,
  pool_size = list(2L, 2L, 2L),
  strides = NULL,
  padding = "valid",
  data_format = NULL,
  ...
)
}
\arguments{
\item{pool_size}{list of 3 integers,
factors by which to downscale (dim1, dim2, dim3).
\verb{(2, 2, 2)} will halve the size of the 3D input in each dimension.}

\item{strides}{list of 3 integers, or NULL. Strides values.}

\item{padding}{One of \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding evenly to
the left/right or up/down of the input such that output has the same
height/width dimension as the input.}

\item{data_format}{A string,
one of \code{channels_last} (default) or \code{channels_first}.
The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)}
while \code{channels_first} corresponds to inputs with shape
\verb{(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)}.
When unspecified, uses
\code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json} (if exists) else 'channels_last'.
Defaults to 'channels_last'.}

\item{...}{standard layer arguments.}
}
\description{
Average pooling operation for 3D data (spatial or spatio-temporal)

Average pooling operation for 3D data (spatial or spatio-temporal)
}
\details{
Downsamples the input along its spatial dimensions (depth, height, and
width) by taking the average value over an input window
(of size defined by \code{pool_size}) for each channel of the input.
The window is shifted by \code{strides} along each dimension.

Input shape:
\itemize{
\item If \code{data_format='channels_last'}:
5D tensor with shape:
\verb{(batch_size, spatial_dim1, spatial_dim2, spatial_dim3, channels)}
\item If \code{data_format='channels_first'}:
5D tensor with shape:
\verb{(batch_size, channels, spatial_dim1, spatial_dim2, spatial_dim3)}
}

Output shape:
\itemize{
\item If \code{data_format='channels_last'}:
5D tensor with shape:
\verb{(batch_size, pooled_dim1, pooled_dim2, pooled_dim3, channels)}
\item If \code{data_format='channels_first'}:
5D tensor with shape:
\verb{(batch_size, channels, pooled_dim1, pooled_dim2, pooled_dim3)}
}

Example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{depth = 30
height = 30
width = 30
input_channels = 3

inputs = tf.keras.Input(shape=(depth, height, width, input_channels))
layer = tf.keras.layers.AveragePooling3D(pool_size=3)
outputs = layer(inputs)  # Shape: (batch_size, 10, 10, 10, 3)
}\if{html}{\out{</div>}}

Downsamples the input along its spatial dimensions (depth, height, and
width) by taking the average value over an input window
(of size defined by \code{pool_size}) for each channel of the input.
The window is shifted by \code{strides} along each dimension.

Input shape:
\itemize{
\item If \code{data_format='channels_last'}:
5D tensor with shape:
\verb{(batch_size, spatial_dim1, spatial_dim2, spatial_dim3, channels)}
\item If \code{data_format='channels_first'}:
5D tensor with shape:
\verb{(batch_size, channels, spatial_dim1, spatial_dim2, spatial_dim3)}
}

Output shape:
\itemize{
\item If \code{data_format='channels_last'}:
5D tensor with shape:
\verb{(batch_size, pooled_dim1, pooled_dim2, pooled_dim3, channels)}
\item If \code{data_format='channels_first'}:
5D tensor with shape:
\verb{(batch_size, channels, pooled_dim1, pooled_dim2, pooled_dim3)}
}

Example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{depth = 30
height = 30
width = 30
input_channels = 3

inputs = tf.keras.Input(shape=(depth, height, width, input_channels))
layer = tf.keras.layers.AveragePooling3D(pool_size=3)
outputs = layer(inputs)  # Shape: (batch_size, 10, 10, 10, 3)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}

\itemize{
\item \url{https://keras.io/api/layers}
}
}
