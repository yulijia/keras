% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_input_layer}
\alias{layer_input_layer}
\title{Layer to be used as an entry point into a Network (a graph of layers)}
\usage{
layer_input_layer(
  object,
  input_shape = NULL,
  batch_size = NULL,
  dtype = NULL,
  input_tensor = NULL,
  sparse = NULL,
  name = NULL,
  ragged = NULL,
  type_spec = NULL,
  ...
)
}
\arguments{
\item{input_shape}{Shape list (not including the batch axis), or
\code{TensorShape} instance (not including the batch axis).}

\item{batch_size}{Optional input batch size (integer or \code{NULL}).}

\item{input_tensor}{Optional tensor to use as layer input. If set, the layer
will use the \code{tf.TypeSpec} of this tensor rather
than creating a new placeholder tensor.}

\item{sparse}{Boolean, whether the placeholder created is meant to be sparse.
Defaults to \code{FALSE}.}

\item{ragged}{Boolean, whether the placeholder created is meant to be ragged.
In this case, values of \code{NULL} in the \code{shape} argument represent
ragged dimensions. For more information about \code{tf.RaggedTensor}, see
\href{https://www.tensorflow.org/guide/ragged_tensor}{this guide}.
Defaults to \code{FALSE}.}

\item{type_spec}{A \code{tf.TypeSpec} object to create Input from. This
\code{tf.TypeSpec} represents the entire batch. When provided, all other
args except name must be \code{NULL}.}

\item{...}{standard layer arguments.}
}
\description{
Layer to be used as an entry point into a Network (a graph of layers)
}
\details{
It can either wrap an existing tensor (pass an \code{input_tensor} argument)
or create a placeholder tensor (pass arguments \code{input_shape}, and
optionally, \code{dtype}).

It is generally recommend to use the Keras Functional model via \code{Input},
(which creates an \code{InputLayer}) without directly using \code{InputLayer}.

When using \code{InputLayer} with the Keras Sequential model, it can be skipped
by moving the \code{input_shape} parameter to the first layer after the
\code{InputLayer}.

This class can create placeholders for \code{tf.Tensors}, \code{tf.SparseTensors}, and
\code{tf.RaggedTensors} by choosing \code{sparse=TRUE} or \code{ragged=TRUE}. Note that
\code{sparse} and \code{ragged} can't be configured to \code{TRUE} at the same time.
Usage:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# With explicit InputLayer.
model = tf.keras.Sequential([
  tf.keras.layers.InputLayer(input_shape=(4,)),
  tf.keras.layers.Dense(8)])
model.compile(tf.keras.optimizers.RMSprop(0.001), loss='mse')
model.fit(np.zeros((10, 4)),
          np.ones((10, 8)))

# Without InputLayer and let the first layer to have the input_shape.
# Keras will add a input for the model behind the scene.
model = tf.keras.Sequential([
  tf.keras.layers.Dense(8, input_shape=(4,))])
model.compile(tf.keras.optimizers.RMSprop(0.001), loss='mse')
model.fit(np.zeros((10, 4)),
          np.ones((10, 8)))
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
