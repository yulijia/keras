% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_separable_conv_2d}
\alias{layer_separable_conv_2d}
\title{Depthwise separable 2D convolution}
\usage{
layer_separable_conv_2d(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L),
  padding = "valid",
  data_format = NULL,
  dilation_rate = list(1L, 1L),
  depth_multiplier = 1L,
  activation = NULL,
  use_bias = TRUE,
  depthwise_initializer = "glorot_uniform",
  pointwise_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  depthwise_regularizer = NULL,
  pointwise_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  depthwise_constraint = NULL,
  pointwise_constraint = NULL,
  bias_constraint = NULL,
  ...
)

layer_separable_conv_2d(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L),
  padding = "valid",
  data_format = NULL,
  dilation_rate = list(1L, 1L),
  depth_multiplier = 1L,
  activation = NULL,
  use_bias = TRUE,
  depthwise_initializer = "glorot_uniform",
  pointwise_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  depthwise_regularizer = NULL,
  pointwise_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  depthwise_constraint = NULL,
  pointwise_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{filters}{Integer, the dimensionality of the output space
(i.e. the number of output filters in the convolution).}

\item{kernel_size}{An integer or list of 2 integers, specifying the
height and width of the 2D convolution window.
Can be a single integer to specify the same value for
all spatial dimensions.}

\item{strides}{An integer or list of 2 integers,
specifying the strides of the convolution along the height and width.
Can be a single integer to specify the same value for
all spatial dimensions. Current implementation only supports equal
length strides in the row and column dimensions.
Specifying any stride value != 1 is incompatible with specifying
any \code{dilation_rate} value != 1.}

\item{padding}{one of \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding with zeros
evenly to the left/right or up/down of the input such that output has
the same height/width dimension as the input.}

\item{data_format}{A string,
one of \code{channels_last} (default) or \code{channels_first}.
The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch_size, height, width, channels)} while \code{channels_first}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}.
When unspecified, uses \code{image_data_format} value found in your Keras
config file at \verb{~/.keras/keras.json} (if exists) else 'channels_last'.
Defaults to 'channels_last'.}

\item{dilation_rate}{An integer or list of 2 integers, specifying
the dilation rate to use for dilated convolution.}

\item{depth_multiplier}{The number of depthwise convolution output channels
for each input channel.
The total number of depthwise convolution output
channels will be equal to \code{filters_in * depth_multiplier}.}

\item{activation}{Activation function to use.
If you don't specify anything, no activation is applied
(see \code{keras.activations}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{depthwise_initializer}{An initializer for the depthwise convolution kernel
(see \code{keras.initializers}). If NULL, then the default initializer
('glorot_uniform') will be used.}

\item{pointwise_initializer}{An initializer for the pointwise convolution kernel
(see \code{keras.initializers}). If NULL, then the default initializer
('glorot_uniform') will be used.}

\item{bias_initializer}{An initializer for the bias vector. If NULL, the default
initializer ('zeros') will be used (see \code{keras.initializers}).}

\item{depthwise_regularizer}{Regularizer function applied to
the depthwise kernel matrix (see \code{keras.regularizers}).}

\item{pointwise_regularizer}{Regularizer function applied to
the pointwise kernel matrix (see \code{keras.regularizers}).}

\item{bias_regularizer}{Regularizer function applied to the bias vector
(see \code{keras.regularizers}).}

\item{activity_regularizer}{Regularizer function applied to
the output of the layer (its "activation")
(see \code{keras.regularizers}).}

\item{depthwise_constraint}{Constraint function applied to
the depthwise kernel matrix
(see \code{keras.constraints}).}

\item{pointwise_constraint}{Constraint function applied to
the pointwise kernel matrix
(see \code{keras.constraints}).}

\item{bias_constraint}{Constraint function applied to the bias vector
(see \code{keras.constraints}).}

\item{...}{standard layer arguments.}
}
\description{
Depthwise separable 2D convolution

Depthwise separable 2D convolution
}
\details{
Separable convolutions consist of first performing
a depthwise spatial convolution
(which acts on each input channel separately)
followed by a pointwise convolution which mixes the resulting
output channels. The \code{depth_multiplier} argument controls how many
output channels are generated per input channel in the depthwise step.

Intuitively, separable convolutions can be understood as
a way to factorize a convolution kernel into two smaller kernels,
or as an extreme version of an Inception block.

Separable convolutions consist of first performing
a depthwise spatial convolution
(which acts on each input channel separately)
followed by a pointwise convolution which mixes the resulting
output channels. The \code{depth_multiplier} argument controls how many
output channels are generated per input channel in the depthwise step.

Intuitively, separable convolutions can be understood as
a way to factorize a convolution kernel into two smaller kernels,
or as an extreme version of an Inception block.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}

\itemize{
\item \url{https://keras.io/api/layers}
}
}
