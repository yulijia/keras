% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-preprocessing.R
\name{old_layer_random_rotation}
\alias{old_layer_random_rotation}
\title{Randomly rotate each image}
\usage{
old_layer_random_rotation(
  object,
  factor,
  fill_mode = "reflect",
  interpolation = "bilinear",
  seed = NULL,
  fill_value = 0,
  ...
)
}
\arguments{
\item{factor}{a float represented as fraction of 2 Pi, or a list of size 2
representing lower and upper bound for rotating clockwise and
counter-clockwise. A positive values means rotating counter clock-wise,
while a negative value means clock-wise. When represented as a single
float, this value is used for both the upper and lower bound. For
instance, \code{factor = c(-0.2, 0.3)} results in an output rotation by a random
amount in the range \verb{[-20\% * 2pi, 30\% * 2pi]}. \code{factor = 0.2} results in an
output rotating by a random amount in the range \verb{[-20\% * 2pi, 20\% * 2pi]}.}

\item{fill_mode}{Points outside the boundaries of the input are filled according
to the given mode (one of \verb{\{"constant", "reflect", "wrap", "nearest"\}}).
\itemize{
\item \emph{reflect}: \verb{(d c b a | a b c d | d c b a)} The input is extended by
reflecting about the edge of the last pixel.
\item \emph{constant}: \verb{(k k k k | a b c d | k k k k)} The input is extended by
filling all values beyond the edge with the same constant value k = 0.
\item \emph{wrap}: \verb{(a b c d | a b c d | a b c d)} The input is extended by
wrapping around to the opposite edge.
\item \emph{nearest}: \verb{(a a a a | a b c d | d d d d)} The input is extended by the
nearest pixel.
}}

\item{interpolation}{Interpolation mode. Supported values: \code{"nearest"},
\code{"bilinear"}.}

\item{seed}{Integer. Used to create a random seed.}

\item{fill_value}{a float represents the value to be filled outside the boundaries
when \code{fill_mode="constant"}.}

\item{...}{standard layer arguments.}
}
\description{
Randomly rotate each image
}
\details{
By default, random rotations are only applied during training.
At inference time, the layer does nothing. If you need to apply random
rotations at inference time, set \code{training} to TRUE when calling the layer.

Input shape:
3D (unbatched) or 4D (batched) tensor with shape:
\verb{(..., height, width, channels)}, in \code{"channels_last"} format

Output shape:
3D (unbatched) or 4D (batched) tensor with shape:
\verb{(..., height, width, channels)}, in \code{"channels_last"} format
}
\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/RandomRotation}
\item \url{https://keras.io/api/layers/preprocessing_layers/}
}

Other image augmentation layers: 
\code{\link{old_layer_random_brightness}()},
\code{\link{old_layer_random_contrast}()},
\code{\link{old_layer_random_crop}()},
\code{\link{old_layer_random_flip}()},
\code{\link{old_layer_random_height}()},
\code{\link{old_layer_random_translation}()},
\code{\link{old_layer_random_width}()},
\code{\link{old_layer_random_zoom}()}

Other preprocessing layers: 
\code{\link{old_layer_category_encoding}()},
\code{\link{old_layer_center_crop}()},
\code{\link{old_layer_discretization}()},
\code{\link{old_layer_hashing}()},
\code{\link{old_layer_integer_lookup}()},
\code{\link{old_layer_normalization}()},
\code{\link{old_layer_random_brightness}()},
\code{\link{old_layer_random_contrast}()},
\code{\link{old_layer_random_crop}()},
\code{\link{old_layer_random_flip}()},
\code{\link{old_layer_random_height}()},
\code{\link{old_layer_random_translation}()},
\code{\link{old_layer_random_width}()},
\code{\link{old_layer_random_zoom}()},
\code{\link{old_layer_rescaling}()},
\code{\link{old_layer_resizing}()},
\code{\link{old_layer_string_lookup}()},
\code{\link{old_layer_text_vectorization}()}
}
\concept{image augmentation layers}
\concept{preprocessing layers}
