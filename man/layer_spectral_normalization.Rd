% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_spectral_normalization}
\alias{layer_spectral_normalization}
\title{Performs spectral normalization on the weights of a target layer}
\usage{
layer_spectral_normalization(object, layer, power_iterations = 1L, ...)
}
\arguments{
\item{layer}{A \code{keras.layers.Layer} instance that
has either a \code{kernel} (e.g. \code{Conv2D}, \code{Dense}...)
or an \code{embeddings} attribute (\code{Embedding} layer).}

\item{power_iterations}{int, the number of iterations during normalization.}

\item{...}{standard layer arguments.}
}
\description{
Performs spectral normalization on the weights of a target layer
}
\details{
This wrapper controls the Lipschitz constant of the weights of a layer by
constraining their spectral norm, which can stabilize the training of GANs.

Wrap \code{keras.layers.Conv2D}:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> x = np.random.rand(1, 10, 10, 1)
>>> conv2d = SpectralNormalization(tf.keras.layers.Conv2D(2, 2))
>>> y = conv2d(x)
>>> y.shape
TensorShape([1, 9, 9, 2])
}\if{html}{\out{</div>}}

Wrap \code{keras.layers.Dense}:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> x = np.random.rand(1, 10, 10, 1)
>>> dense = SpectralNormalization(tf.keras.layers.Dense(10))
>>> y = dense(x)
>>> y.shape
TensorShape([1, 10, 10, 10])
}\if{html}{\out{</div>}}

Reference:
\itemize{
\item \href{https://arxiv.org/abs/1802.05957}{Spectral Normalization for GAN}.
}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
