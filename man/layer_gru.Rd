% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_gru}
\alias{layer_gru}
\title{Gated Recurrent Unit - Cho et al. 2014}
\usage{
layer_gru(
  object,
  units,
  activation = "tanh",
  recurrent_activation = "sigmoid",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  unroll = FALSE,
  time_major = FALSE,
  reset_after = TRUE,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
Default: hyperbolic tangent (\code{tanh}).
If you pass \code{NULL}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{recurrent_activation}{Activation function to use
for the recurrent step.
Default: sigmoid (\code{sigmoid}).
If you pass \code{NULL}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, (default \code{TRUE}), whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix,
used for the linear transformation of the inputs. Default:
\code{glorot_uniform}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel}
weights matrix, used for the linear transformation of the recurrent
state. Default: \code{orthogonal}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{zeros}.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{NULL}.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation"). Default: \code{NULL}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_constraint}{Constraint function applied to the bias vector. Default:
\code{NULL}.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state. Default: 0.}

\item{return_sequences}{Boolean. Whether to return the last output
in the output sequence, or the full sequence. Default: \code{FALSE}.}

\item{return_state}{Boolean. Whether to return the last state in addition to the
output. Default: \code{FALSE}.}

\item{go_backwards}{Boolean (default \code{FALSE}).
If TRUE, process the input sequence backwards and return the
reversed sequence.}

\item{stateful}{Boolean (default FALSE). If TRUE, the last state
for each sample at index i in a batch will be used as initial
state for the sample of index i in the following batch.}

\item{unroll}{Boolean (default FALSE).
If TRUE, the network will be unrolled,
else a symbolic loop will be used.
Unrolling can speed-up a RNN,
although it tends to be more memory-intensive.
Unrolling is only suitable for short sequences.}

\item{time_major}{The shape format of the \code{inputs} and \code{outputs} tensors.
If TRUE, the inputs and outputs will be in shape
\verb{[timesteps, batch, feature]}, whereas in the FALSE case, it will be
\verb{[batch, timesteps, feature]}. Using \code{time_major = TRUE} is a bit more
efficient because it avoids transposes at the beginning and end of the
RNN calculation. However, most TensorFlow data is batch-major, so by
default this function accepts input and emits output in batch-major
form.}

\item{reset_after}{GRU convention (whether to apply reset gate after or
before matrix multiplication). FALSE = "before",
TRUE = "after" (default and cuDNN compatible).}

\item{...}{standard layer arguments.}
}
\description{
Gated Recurrent Unit - Cho et al. 2014
}
\details{
See \href{https://www.tensorflow.org/guide/keras/rnn}{the Keras RNN API guide}
for details about the usage of RNN API.

Based on available runtime hardware and constraints, this layer
will choose different implementations (cuDNN-based or pure-TensorFlow)
to maximize the performance. If a GPU is available and all
the arguments to the layer meet the requirement of the cuDNN kernel
(see below for details), the layer will use a fast cuDNN implementation.

The requirements to use the cuDNN implementation are:
\enumerate{
\item \code{activation} == \code{tanh}
\item \code{recurrent_activation} == \code{sigmoid}
\item \code{recurrent_dropout} == 0
\item \code{unroll} is \code{FALSE}
\item \code{use_bias} is \code{TRUE}
\item \code{reset_after} is \code{TRUE}
\item Inputs, if use masking, are strictly right-padded.
\item Eager execution is enabled in the outermost context.
}

There are two variants of the GRU implementation. The default one is based
on \href{https://arxiv.org/abs/1406.1078v3}{v3} and has reset gate applied to
hidden state before matrix multiplication. The other one is based on
\href{https://arxiv.org/abs/1406.1078v1}{original} and has the order reversed.

The second variant is compatible with CuDNNGRU (GPU-only) and allows
inference on CPU. Thus it has separate biases for \code{kernel} and
\code{recurrent_kernel}. To use this variant, set \code{reset_after=TRUE} and
\code{recurrent_activation='sigmoid'}.

For example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> inputs = tf.random.normal([32, 10, 8])
>>> gru = tf.keras.layers.GRU(4)
>>> output = gru(inputs)
>>> print(output.shape)
(32, 4)
>>> gru = tf.keras.layers.GRU(4, return_sequences=TRUE, return_state=TRUE)
>>> whole_sequence_output, final_state = gru(inputs)
>>> print(whole_sequence_output.shape)
(32, 10, 4)
>>> print(final_state.shape)
(32, 4)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
