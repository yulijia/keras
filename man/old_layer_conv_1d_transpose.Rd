% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-convolutional.R
\name{old_layer_conv_1d_transpose}
\alias{old_layer_conv_1d_transpose}
\title{Transposed 1D convolution layer (sometimes called Deconvolution).}
\usage{
old_layer_conv_1d_transpose(
  object,
  filters,
  kernel_size,
  strides = 1,
  padding = "valid",
  output_padding = NULL,
  data_format = NULL,
  dilation_rate = 1,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  input_shape = NULL,
  batch_input_shape = NULL,
  batch_size = NULL,
  dtype = NULL,
  name = NULL,
  trainable = NULL,
  weights = NULL
)
}
\arguments{
\item{filters}{Integer, the dimensionality of the output space
(i.e. the number of output filters in the convolution).}

\item{kernel_size}{An integer or list of a single integer,
specifying the length of the 1D convolution window.}

\item{strides}{An integer or list of a single integer,
specifying the stride length of the convolution.
Specifying any stride value != 1 is incompatible with specifying
any \code{dilation_rate} value != 1.}

\item{padding}{one of \code{"valid"} or \code{"same"} (case-insensitive).}

\item{output_padding}{An integer specifying the amount of padding along
the time dimension of the output tensor.
The amount of output padding must be lower than the stride.
If set to \code{NULL} (default), the output shape is inferred.}

\item{data_format}{A string, one of \code{channels_last} (default) or
\code{channels_first}. The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape \verb{(batch_size, width, channels)} while \code{channels_first} corresponds to inputs with shape
\verb{(batch_size, channels, width)}. Note that the \code{channels_first} format
is currently not supported by TensorFlow on CPU.}

\item{dilation_rate}{an integer or list of a single integer, specifying
the dilation rate to use for dilated convolution.
Currently, specifying any \code{dilation_rate} value != 1 is
incompatible with specifying any \code{strides} value != 1.}

\item{activation}{Activation function to use.
If you don't specify anything, no activation is applied
(see \code{keras.activations}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix
(see \code{keras.initializers}). Defaults to 'glorot_uniform'.}

\item{bias_initializer}{Initializer for the bias vector
(see \code{keras.initializers}). Defaults to 'zeros'.}

\item{kernel_regularizer}{Regularizer function applied to
the \code{kernel} weights matrix (see \code{keras.regularizers}).}

\item{bias_regularizer}{Regularizer function applied to the bias vector
(see \code{keras.regularizers}).}

\item{activity_regularizer}{Regularizer function applied to
the output of the layer (its "activation")
(see \code{keras.regularizers}).}

\item{kernel_constraint}{Constraint function applied to the kernel matrix
(see \code{keras.constraints}).}

\item{bias_constraint}{Constraint function applied to the bias vector
(see \code{keras.constraints}).}
}
\description{
The need for transposed convolutions generally arises from the desire to use
a transformation going in the opposite direction of a normal convolution,
i.e., from something that has the shape of the output of some convolution to
something that has the shape of its input while maintaining a connectivity
pattern that is compatible with said convolution.
When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(tuple of integers, does not include the sample axis),
e.g. \verb{input_shape=(128, 3)} for data with 128 time steps and 3 channels.
}
\section{Input shape}{
 3D tensor with shape: \verb{(batch, steps, channels)}
}

\section{Output shape}{
 3D tensor with shape: \verb{(batch, new_steps, filters)}
If \code{output_padding} is specified:

\if{html}{\out{<div class="sourceCode">}}\preformatted{new_timesteps = ((timesteps - 1) * strides + kernel_size - 2 * padding + output_padding)
}\if{html}{\out{</div>}}
}

\section{References}{

\itemize{
\item \href{https://arxiv.org/abs/1603.07285v1}{A guide to convolution arithmetic for deep learning}
}
}

\seealso{
Other convolutional layers: 
\code{\link{old_layer_conv_1d}()},
\code{\link{old_layer_conv_2d_transpose}()},
\code{\link{old_layer_conv_2d}()},
\code{\link{old_layer_conv_3d_transpose}()},
\code{\link{old_layer_conv_3d}()},
\code{\link{old_layer_conv_lstm_2d}()},
\code{\link{old_layer_cropping_1d}()},
\code{\link{old_layer_cropping_2d}()},
\code{\link{old_layer_cropping_3d}()},
\code{\link{old_layer_depthwise_conv_1d}()},
\code{\link{old_layer_depthwise_conv_2d}()},
\code{\link{old_layer_separable_conv_1d}()},
\code{\link{old_layer_separable_conv_2d}()},
\code{\link{old_layer_upsampling_1d}()},
\code{\link{old_layer_upsampling_2d}()},
\code{\link{old_layer_upsampling_3d}()},
\code{\link{old_layer_zero_padding_1d}()},
\code{\link{old_layer_zero_padding_2d}()},
\code{\link{old_layer_zero_padding_3d}()}
}
\concept{convolutional layers}
