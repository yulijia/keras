% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzzz.R
\name{layer_lambda}
\alias{layer_lambda}
\title{Wraps arbitrary expressions as a \code{Layer} object}
\usage{
layer_lambda(
  object,
  `function`,
  output_shape = NULL,
  mask = NULL,
  arguments = NULL,
  ...
)
}
\arguments{
\item{function}{The function to be evaluated. Takes input tensor as first
argument.}

\item{output_shape}{Expected output shape from function. This argument can be
inferred if not explicitly provided. Can be a list or function. If a
list, it only specifies the first dimension onward;
sample dimension is assumed either the same as the input:
\verb{output_shape = (input_shape[0], ) + output_shape} or, the input is
\code{NULL} and the sample dimension is also \code{NULL}:
\verb{output_shape = (NULL, ) + output_shape} If a function, it specifies the
entire shape as a function of the input shape:
\code{output_shape = f(input_shape)}}

\item{mask}{Either NULL (indicating no masking) or a callable with the same
signature as the \code{compute_mask} layer method, or a tensor that will be
returned as output mask regardless of what the input is.}

\item{arguments}{Optional dictionary of keyword arguments to be passed to the
function.}

\item{...}{standard layer arguments.}
}
\description{
Wraps arbitrary expressions as a \code{Layer} object
}
\details{
The \code{Lambda} layer exists so that arbitrary expressions can be used
as a \code{Layer} when constructing Sequential
and Functional API models. \code{Lambda} layers are best suited for simple
operations or quick experimentation. For more advanced use cases, follow
\href{https://www.tensorflow.org/guide/keras/custom_layers_and_models}{this guide}
for subclassing \code{tf.keras.layers.Layer}.

WARNING: \code{tf.keras.layers.Lambda} layers have (de)serialization limitations!

The main reason to subclass \code{tf.keras.layers.Layer} instead of using a
\code{Lambda} layer is saving and inspecting a Model. \code{Lambda} layers
are saved by serializing the Python bytecode, which is fundamentally
non-portable. They should only be loaded in the same environment where
they were saved. Subclassed layers can be saved in a more portable way
by overriding their \code{get_config()} method. Models that rely on
subclassed Layers are also often easier to visualize and reason about.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
