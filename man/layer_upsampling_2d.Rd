% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_upsampling_2d}
\alias{layer_upsampling_2d}
\title{Upsampling layer for 2D inputs}
\usage{
layer_upsampling_2d(
  object,
  size = list(2L, 2L),
  data_format = NULL,
  interpolation = "nearest",
  ...
)
}
\arguments{
\item{size}{Int, or list of 2 integers.
The upsampling factors for rows and columns.}

\item{data_format}{A string,
one of \code{channels_last} (default) or \code{channels_first}.
The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape
\verb{(batch_size, height, width, channels)} while \code{channels_first}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}.
When unspecified, uses
\code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json} (if exists) else 'channels_last'.
Defaults to 'channels_last'.}

\item{interpolation}{A string, one of \code{"area"}, \code{"bicubic"}, \code{"bilinear"},
\code{"gaussian"}, \code{"lanczos3"}, \code{"lanczos5"}, \code{"mitchellcubic"},
\code{"nearest"}.}

\item{...}{standard layer arguments.}
}
\description{
Upsampling layer for 2D inputs
}
\details{
Repeats the rows and columns of the data
by \code{size[0]} and \code{size[1]} respectively.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> input_shape = (2, 2, 1, 3)
>>> x = np.arange(np.prod(input_shape)).reshape(input_shape)
>>> print(x)
[[[[ 0  1  2]]
  [[ 3  4  5]]]
 [[[ 6  7  8]]
  [[ 9 10 11]]]]
>>> y = tf.keras.layers.UpSampling2D(size=(1, 2))(x)
>>> print(y)
tf.Tensor(
  [[[[ 0  1  2]
     [ 0  1  2]]
    [[ 3  4  5]
     [ 3  4  5]]]
   [[[ 6  7  8]
     [ 6  7  8]]
    [[ 9 10 11]
     [ 9 10 11]]]], shape=(2, 2, 2, 3), dtype=int64)
}\if{html}{\out{</div>}}

Input shape:
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, rows, cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, rows, cols)}
}

Output shape:
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, upsampled_rows, upsampled_cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, upsampled_rows, upsampled_cols)}
}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
