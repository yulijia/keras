% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_additive_attention}
\alias{layer_additive_attention}
\title{Additive attention layer, a.k.a. Bahdanau-style attention}
\usage{
layer_additive_attention(object, use_scale = TRUE, ...)
}
\arguments{
\item{use_scale}{If \code{TRUE}, will create a variable to scale the attention
scores.}

\item{...}{standard layer arguments.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
attention scores. Defaults to \code{0.0}.}
}
\description{
Additive attention layer, a.k.a. Bahdanau-style attention
}
\details{
Inputs are \code{query} tensor of shape \verb{[batch_size, Tq, dim]}, \code{value} tensor
of shape \verb{[batch_size, Tv, dim]} and \code{key} tensor of shape
\verb{[batch_size, Tv, dim]}. The calculation follows the steps:
\enumerate{
\item Reshape \code{query} and \code{key} into shapes \verb{[batch_size, Tq, 1, dim]}
and \verb{[batch_size, 1, Tv, dim]} respectively.
\item Calculate scores with shape \verb{[batch_size, Tq, Tv]} as a non-linear
sum: \code{scores = tf.reduce_sum(tf.tanh(query + key), axis=-1)}
\item Use scores to calculate a distribution with shape
\verb{[batch_size, Tq, Tv]}: \code{distribution = tf.nn.softmax(scores)}.
\item Use \code{distribution} to create a linear combination of \code{value} with
shape \verb{[batch_size, Tq, dim]}:
\verb{return tf.matmul(distribution, value)}.
}

Call arguments:
inputs: List of the following tensors:
* query: Query \code{Tensor} of shape \verb{[batch_size, Tq, dim]}.
* value: Value \code{Tensor} of shape \verb{[batch_size, Tv, dim]}.
* key: Optional key \code{Tensor} of shape \verb{[batch_size, Tv, dim]}.
If not given, will use \code{value} for both \code{key} and \code{value},
which is the most common case.
mask: List of the following tensors:
* query_mask: A boolean mask \code{Tensor} of shape \verb{[batch_size, Tq]}.
If given, the output will be zero at the positions where
\code{mask==FALSE}.
* value_mask: A boolean mask \code{Tensor} of shape \verb{[batch_size, Tv]}.
If given, will apply the mask such that values at positions
where \code{mask==FALSE} do not contribute to the result.
training: Python boolean indicating whether the layer should behave in
training mode (adding dropout) or in inference mode (no dropout).
return_attention_scores: bool, it \code{TRUE}, returns the attention scores
(after masking and softmax) as an additional output argument.
use_causal_mask: Boolean. Set to \code{TRUE} for decoder self-attention. Adds
a mask such that position \code{i} cannot attend to positions \code{j > i}.
This prevents the flow of information from the future towards the
past. Defaults to \code{FALSE}.

Output:

\if{html}{\out{<div class="sourceCode">}}\preformatted{Attention outputs of shape `[batch_size, Tq, dim]`.
[Optional] Attention scores after masking and softmax with shape
    `[batch_size, Tq, Tv]`.
}\if{html}{\out{</div>}}

The meaning of \code{query}, \code{value} and \code{key} depend on the application. In the
case of text similarity, for example, \code{query} is the sequence embeddings of
the first piece of text and \code{value} is the sequence embeddings of the second
piece of text. \code{key} is usually the same tensor as \code{value}.

Here is a code example for using \code{AdditiveAttention} in a CNN+Attention
network:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Variable-length int sequences.
query_input = tf.keras.Input(shape=(NULL,), dtype='int32')
value_input = tf.keras.Input(shape=(NULL,), dtype='int32')

# Embedding lookup.
token_embedding = tf.keras.layers.Embedding(max_tokens, dimension)
# Query embeddings of shape [batch_size, Tq, dimension].
query_embeddings = token_embedding(query_input)
# Value embeddings of shape [batch_size, Tv, dimension].
value_embeddings = token_embedding(value_input)

# CNN layer.
cnn_layer = tf.keras.layers.Conv1D(
    filters=100,
    kernel_size=4,
    # Use 'same' padding so outputs have the same shape as inputs.
    padding='same')
# Query encoding of shape [batch_size, Tq, filters].
query_seq_encoding = cnn_layer(query_embeddings)
# Value encoding of shape [batch_size, Tv, filters].
value_seq_encoding = cnn_layer(value_embeddings)

# Query-value attention of shape [batch_size, Tq, filters].
query_value_attention_seq = tf.keras.layers.AdditiveAttention()(
    [query_seq_encoding, value_seq_encoding])

# Reduce over the sequence axis to produce encodings of shape
# [batch_size, filters].
query_encoding = tf.keras.layers.GlobalAveragePooling1D()(
    query_seq_encoding)
query_value_attention = tf.keras.layers.GlobalAveragePooling1D()(
    query_value_attention_seq)

# Concatenate query and document encodings to produce a DNN input layer.
input_layer = tf.keras.layers.Concatenate()(
    [query_encoding, query_value_attention])

# Add DNN layers, and create Model.
# ...
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
