% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_lstm}
\alias{layer_lstm}
\title{Long Short-Term Memory layer - Hochreiter 1997}
\usage{
layer_lstm(
  object,
  units,
  activation = "tanh",
  recurrent_activation = "sigmoid",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  unit_forget_bias = TRUE,
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  time_major = FALSE,
  unroll = FALSE,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
Default: hyperbolic tangent (\code{tanh}). If you pass \code{NULL}, no activation
is applied (ie. "linear" activation: \code{a(x) = x}).}

\item{recurrent_activation}{Activation function to use for the recurrent step.
Default: sigmoid (\code{sigmoid}). If you pass \code{NULL}, no activation is
applied (ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean (default \code{TRUE}), whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix, used for
the linear transformation of the inputs. Default: \code{glorot_uniform}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel} weights
matrix, used for the linear transformation of the recurrent state.
Default: \code{orthogonal}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{zeros}.}

\item{unit_forget_bias}{Boolean (default \code{TRUE}). If TRUE, add 1 to the bias of
the forget gate at initialization. Setting it to true will also force
\code{bias_initializer="zeros"}. This is recommended in \href{http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf}{Jozefowicz et al.}.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{NULL}.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation"). Default: \code{NULL}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_constraint}{Constraint function applied to the bias vector. Default:
\code{NULL}.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state. Default: 0.}

\item{return_sequences}{Boolean. Whether to return the last output in the output
sequence, or the full sequence. Default: \code{FALSE}.}

\item{return_state}{Boolean. Whether to return the last state in addition to the
output. Default: \code{FALSE}.}

\item{go_backwards}{Boolean (default \code{FALSE}). If TRUE, process the input
sequence backwards and return the reversed sequence.}

\item{stateful}{Boolean (default \code{FALSE}). If TRUE, the last state for each
sample at index i in a batch will be used as initial state for the sample
of index i in the following batch.}

\item{time_major}{The shape format of the \code{inputs} and \code{outputs} tensors.
If TRUE, the inputs and outputs will be in shape
\verb{[timesteps, batch, feature]}, whereas in the FALSE case, it will be
\verb{[batch, timesteps, feature]}. Using \code{time_major = TRUE} is a bit more
efficient because it avoids transposes at the beginning and end of the
RNN calculation. However, most TensorFlow data is batch-major, so by
default this function accepts input and emits output in batch-major
form.}

\item{unroll}{Boolean (default \code{FALSE}). If TRUE, the network will be unrolled,
else a symbolic loop will be used. Unrolling can speed-up a RNN,
although it tends to be more memory-intensive. Unrolling is only
suitable for short sequences.}

\item{...}{standard layer arguments.}
}
\description{
Long Short-Term Memory layer - Hochreiter 1997
}
\details{
See \href{https://www.tensorflow.org/guide/keras/rnn}{the Keras RNN API guide}
for details about the usage of RNN API.

Based on available runtime hardware and constraints, this layer
will choose different implementations (cuDNN-based or pure-TensorFlow)
to maximize the performance. If a GPU is available and all
the arguments to the layer meet the requirement of the cuDNN kernel
(see below for details), the layer will use a fast cuDNN implementation.

The requirements to use the cuDNN implementation are:
\enumerate{
\item \code{activation} == \code{tanh}
\item \code{recurrent_activation} == \code{sigmoid}
\item \code{recurrent_dropout} == 0
\item \code{unroll} is \code{FALSE}
\item \code{use_bias} is \code{TRUE}
\item Inputs, if use masking, are strictly right-padded.
\item Eager execution is enabled in the outermost context.
}

For example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> inputs = tf.random.normal([32, 10, 8])
>>> lstm = tf.keras.layers.LSTM(4)
>>> output = lstm(inputs)
>>> print(output.shape)
(32, 4)
>>> lstm = tf.keras.layers.LSTM(4, return_sequences=TRUE, return_state=TRUE)
>>> whole_seq_output, final_memory_state, final_carry_state = lstm(inputs)
>>> print(whole_seq_output.shape)
(32, 10, 4)
>>> print(final_memory_state.shape)
(32, 4)
>>> print(final_carry_state.shape)
(32, 4)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
