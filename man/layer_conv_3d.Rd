% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_conv_3d}
\alias{layer_conv_3d}
\title{3D convolution layer (e.g. spatial convolution over volumes)}
\usage{
layer_conv_3d(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L, 1L),
  padding = "valid",
  data_format = NULL,
  dilation_rate = list(1L, 1L, 1L),
  groups = 1L,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)

layer_conv_3d(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L, 1L),
  padding = "valid",
  data_format = NULL,
  dilation_rate = list(1L, 1L, 1L),
  groups = 1L,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{filters}{Integer, the dimensionality of the output space (i.e. the number
of output filters in the convolution).}

\item{kernel_size}{An integer or list of 3 integers, specifying the depth,
height and width of the 3D convolution window. Can be a single integer
to specify the same value for all spatial dimensions.}

\item{strides}{An integer or list of 3 integers, specifying the strides of
the convolution along each spatial dimension. Can be a single integer to
specify the same value for all spatial dimensions. Specifying any stride
value != 1 is incompatible with specifying any \code{dilation_rate} value !=
1.}

\item{padding}{one of \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding with zeros
evenly to the left/right or up/down of the input such that output has
the same height/width dimension as the input.}

\item{data_format}{A string, one of \code{channels_last} (default) or
\code{channels_first}.  The ordering of the dimensions in the inputs.
\code{channels_last} corresponds to inputs with shape \verb{batch_shape + (spatial_dim1, spatial_dim2, spatial_dim3, channels)} while
\code{channels_first} corresponds to inputs with shape \verb{batch_shape + (channels, spatial_dim1, spatial_dim2, spatial_dim3)}. When unspecified,
uses \code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json} (if exists) else 'channels_last'. Note that the
\code{channels_first} format is currently not supported by TensorFlow on CPU.
Defaults to 'channels_last'.}

\item{dilation_rate}{an integer or list of 3 integers, specifying the
dilation rate to use for dilated convolution. Can be a single integer to
specify the same value for all spatial dimensions. Currently, specifying
any \code{dilation_rate} value != 1 is incompatible with specifying any
stride value != 1.}

\item{groups}{A positive integer specifying the number of groups in which the
input is split along the channel axis. Each group is convolved
separately with \code{filters / groups} filters. The output is the
concatenation of all the \code{groups} results along the channel axis. Input
channels and \code{filters} must both be divisible by \code{groups}.}

\item{activation}{Activation function to use. If you don't specify anything, no
activation is applied (see \code{keras.activations}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix (see
\code{keras.initializers}). Defaults to 'glorot_uniform'.}

\item{bias_initializer}{Initializer for the bias vector (see
\code{keras.initializers}). Defaults to 'zeros'.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix (see \code{keras.regularizers}).}

\item{bias_regularizer}{Regularizer function applied to the bias vector (see
\code{keras.regularizers}).}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation") (see \code{keras.regularizers}).}

\item{kernel_constraint}{Constraint function applied to the kernel matrix (see
\code{keras.constraints}).}

\item{bias_constraint}{Constraint function applied to the bias vector (see
\code{keras.constraints}).}

\item{...}{standard layer arguments.}
}
\description{
3D convolution layer (e.g. spatial convolution over volumes)

3D convolution layer (e.g. spatial convolution over volumes)
}
\details{
This layer creates a convolution kernel that is convolved
with the layer input to produce a tensor of
outputs. If \code{use_bias} is TRUE,
a bias vector is created and added to the outputs. Finally, if
\code{activation} is not \code{NULL}, it is applied to the outputs as well.

When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(list of integers or \code{NULL}, does not include the sample axis),
e.g. \verb{input_shape=(128, 128, 128, 1)} for 128x128x128 volumes
with a single channel,
in \code{data_format="channels_last"}.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> # The inputs are 28x28x28 volumes with a single channel, and the
>>> # batch size is 4
>>> input_shape =(4, 28, 28, 28, 1)
>>> x = tf.random.normal(input_shape)
>>> y = tf.keras.layers.Conv3D(
... 2, 3, activation='relu', input_shape=input_shape[1:])(x)
>>> print(y.shape)
(4, 26, 26, 26, 2)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> # With extended batch shape [4, 7], e.g. a batch of 4 videos of
>>> # 3D frames, with 7 frames per video.
>>> input_shape = (4, 7, 28, 28, 28, 1)
>>> x = tf.random.normal(input_shape)
>>> y = tf.keras.layers.Conv3D(
... 2, 3, activation='relu', input_shape=input_shape[2:])(x)
>>> print(y.shape)
(4, 7, 26, 26, 26, 2)
}\if{html}{\out{</div>}}

Input shape:
5+D tensor with shape: \verb{batch_shape + (channels, conv_dim1, conv_dim2, conv_dim3)} if data_format='channels_first'
or 5+D tensor with shape: \verb{batch_shape + (conv_dim1, conv_dim2, conv_dim3, channels)} if data_format='channels_last'.

Output shape:
5+D tensor with shape: \verb{batch_shape + (filters, new_conv_dim1, new_conv_dim2, new_conv_dim3)} if data_format='channels_first'
or 5+D tensor with shape: \verb{batch_shape + (new_conv_dim1, new_conv_dim2, new_conv_dim3, filters)} if data_format='channels_last'.
\code{new_conv_dim1}, \code{new_conv_dim2} and \code{new_conv_dim3} values might have
changed due to padding.

A tensor of rank 5+ representing

This layer creates a convolution kernel that is convolved
with the layer input to produce a tensor of
outputs. If \code{use_bias} is TRUE,
a bias vector is created and added to the outputs. Finally, if
\code{activation} is not \code{NULL}, it is applied to the outputs as well.

When using this layer as the first layer in a model,
provide the keyword argument \code{input_shape}
(list of integers or \code{NULL}, does not include the sample axis),
e.g. \verb{input_shape=(128, 128, 128, 1)} for 128x128x128 volumes
with a single channel,
in \code{data_format="channels_last"}.

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> # The inputs are 28x28x28 volumes with a single channel, and the
>>> # batch size is 4
>>> input_shape =(4, 28, 28, 28, 1)
>>> x = tf.random.normal(input_shape)
>>> y = tf.keras.layers.Conv3D(
... 2, 3, activation='relu', input_shape=input_shape[1:])(x)
>>> print(y.shape)
(4, 26, 26, 26, 2)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> # With extended batch shape [4, 7], e.g. a batch of 4 videos of
>>> # 3D frames, with 7 frames per video.
>>> input_shape = (4, 7, 28, 28, 28, 1)
>>> x = tf.random.normal(input_shape)
>>> y = tf.keras.layers.Conv3D(
... 2, 3, activation='relu', input_shape=input_shape[2:])(x)
>>> print(y.shape)
(4, 7, 26, 26, 26, 2)
}\if{html}{\out{</div>}}

Input shape:
5+D tensor with shape: \verb{batch_shape + (channels, conv_dim1, conv_dim2, conv_dim3)} if data_format='channels_first'
or 5+D tensor with shape: \verb{batch_shape + (conv_dim1, conv_dim2, conv_dim3, channels)} if data_format='channels_last'.

Output shape:
5+D tensor with shape: \verb{batch_shape + (filters, new_conv_dim1, new_conv_dim2, new_conv_dim3)} if data_format='channels_first'
or 5+D tensor with shape: \verb{batch_shape + (new_conv_dim1, new_conv_dim2, new_conv_dim3, filters)} if data_format='channels_last'.
\code{new_conv_dim1}, \code{new_conv_dim2} and \code{new_conv_dim3} values might have
changed due to padding.

A tensor of rank 5+ representing
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}

\itemize{
\item \url{https://keras.io/api/layers}
}
}
