% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_category_encoding}
\alias{layer_category_encoding}
\title{A preprocessing layer which encodes integer features}
\usage{
layer_category_encoding(
  object,
  num_tokens = NULL,
  output_mode = "multi_hot",
  sparse = FALSE,
  ...
)
}
\arguments{
\item{num_tokens}{The total number of tokens the layer should support. All
inputs to the layer must integers in the range \verb{0 <= value < num_tokens}, or an error will be thrown.}

\item{output_mode}{Specification for the output of the layer.
Values can be \code{"one_hot"}, \code{"multi_hot"} or
\code{"count"}, configuring the layer as follows:
\itemize{
\item \code{"one_hot"}: Encodes each individual element in the input into an
array of \code{num_tokens} size, containing a 1 at the element index. If
the last dimension is size 1, will encode on that dimension. If the
last dimension is not size 1, will append a new dimension for the
encoded output.
\item \code{"multi_hot"}: Encodes each sample in the input into a single array
of \code{num_tokens} size, containing a 1 for each vocabulary term
present in the sample. Treats the last dimension as the sample
dimension, if input shape is \verb{(..., sample_length)}, output shape
will be \verb{(..., num_tokens)}.
\item \code{"count"}: Like \code{"multi_hot"}, but the int array contains a count of
the number of times the token at that index appeared in the sample.
For all output modes, currently only output up to rank 2 is supported.
Defaults to \code{"multi_hot"}.
}}

\item{sparse}{Boolean. If true, returns a \code{SparseTensor} instead of a dense
\code{Tensor}. Defaults to \code{FALSE}.}

\item{...}{standard layer arguments.}
}
\description{
A preprocessing layer which encodes integer features
}
\details{
This layer provides options for condensing data into a categorical encoding
when the total number of tokens are known in advance. It accepts integer
values as inputs, and it outputs a dense or sparse representation of those
inputs. For integer inputs where the total number of tokens is not known,
use \code{tf.keras.layers.IntegerLookup} instead.

For an overview and full list of preprocessing layers, see the preprocessing
\href{https://www.tensorflow.org/guide/keras/preprocessing_layers}{guide}.

\strong{One-hot encoding data}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> layer = tf.keras.layers.CategoryEncoding(
...           num_tokens=4, output_mode="one_hot")
>>> layer([3, 2, 0, 1])
<tf.Tensor: shape=(4, 4), dtype=float32, numpy=
  array([[0., 0., 0., 1.],
         [0., 0., 1., 0.],
         [1., 0., 0., 0.],
         [0., 1., 0., 0.]], dtype=float32)>
}\if{html}{\out{</div>}}

\strong{Multi-hot encoding data}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> layer = tf.keras.layers.CategoryEncoding(
...           num_tokens=4, output_mode="multi_hot")
>>> layer([[0, 1], [0, 0], [1, 2], [3, 1]])
<tf.Tensor: shape=(4, 4), dtype=float32, numpy=
  array([[1., 1., 0., 0.],
         [1., 0., 0., 0.],
         [0., 1., 1., 0.],
         [0., 1., 0., 1.]], dtype=float32)>
}\if{html}{\out{</div>}}

\strong{Using weighted inputs in \code{"count"} mode}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{>>> layer = tf.keras.layers.CategoryEncoding(
...           num_tokens=4, output_mode="count")
>>> count_weights = np.array([[.1, .2], [.1, .1], [.2, .3], [.4, .2]])
>>> layer([[0, 1], [0, 0], [1, 2], [3, 1]], count_weights=count_weights)
<tf.Tensor: shape=(4, 4), dtype=float64, numpy=
  array([[0.1, 0.2, 0. , 0. ],
         [0.2, 0. , 0. , 0. ],
         [0. , 0.2, 0.3, 0. ],
         [0. , 0.2, 0. , 0.4]], dtype=float32)>
}\if{html}{\out{</div>}}

Call arguments:
inputs: A 1D or 2D tensor of integer inputs.
count_weights: A tensor in the same shape as \code{inputs} indicating the
weight for each sample value when summing up in \code{count} mode. Not used
in \code{"multi_hot"} or \code{"one_hot"} modes.
}
\seealso{
\itemize{
\item \url{https://keras.io/api/layers}
}
}
